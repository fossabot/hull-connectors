/* !
 * clipboard.js v1.5.10
 * https://zenorocha.github.io/clipboard.js
 *
 * Licensed MIT Â© Zeno Rocha
 */
!(function(t) {
  if (typeof exports === "object" && typeof module !== "undefined")
    module.exports = t();
  else if (typeof define === "function" && define.amd) define([], t);
  else {
    let e;
    (e =
      typeof window !== "undefined"
        ? window
        : typeof global !== "undefined"
        ? global
        : typeof self !== "undefined"
        ? self
        : this),
      (e.Clipboard = t());
  }
})(function() {
  let t;
  let e;
  let n;
  return (function t(e, n, o) {
    function i(c, a) {
      if (!n[c]) {
        if (!e[c]) {
          const s = typeof require === "function" && require;
          if (!a && s) return s(c, !0);
          if (r) return r(c, !0);
          const l = new Error(`Cannot find module '${c}'`);
          throw ((l.code = "MODULE_NOT_FOUND"), l);
        }
        const u = (n[c] = { exports: {} });
        e[c][0].call(
          u.exports,
          function(t) {
            const n = e[c][1][t];
            return i(n || t);
          },
          u,
          u.exports,
          t,
          e,
          n,
          o
        );
      }
      return n[c].exports;
    }
    for (
      var r = typeof require === "function" && require, c = 0;
      c < o.length;
      c++
    )
      i(o[c]);
    return i;
  })(
    {
      1: [
        function(t, e, n) {
          const o = t("matches-selector");
          e.exports = function(t, e, n) {
            for (let i = n ? t : t.parentNode; i && i !== document; ) {
              if (o(i, e)) return i;
              i = i.parentNode;
            }
          };
        },
        { "matches-selector": 5 }
      ],
      2: [
        function(t, e, n) {
          function o(t, e, n, o, r) {
            const c = i.apply(this, arguments);
            return (
              t.addEventListener(n, c, r),
              {
                destroy() {
                  t.removeEventListener(n, c, r);
                }
              }
            );
          }
          function i(t, e, n, o) {
            return function(n) {
              (n.delegateTarget = r(n.target, e, !0)),
                n.delegateTarget && o.call(t, n);
            };
          }
          var r = t("closest");
          e.exports = o;
        },
        { closest: 1 }
      ],
      3: [
        function(t, e, n) {
          (n.node = function(t) {
            return void 0 !== t && t instanceof HTMLElement && t.nodeType === 1;
          }),
            (n.nodeList = function(t) {
              const e = Object.prototype.toString.call(t);
              return (
                void 0 !== t &&
                (e === "[object NodeList]" ||
                  e === "[object HTMLCollection]") &&
                "length" in t &&
                (t.length === 0 || n.node(t[0]))
              );
            }),
            (n.string = function(t) {
              return typeof t === "string" || t instanceof String;
            }),
            (n.fn = function(t) {
              const e = Object.prototype.toString.call(t);
              return e === "[object Function]";
            });
        },
        {}
      ],
      4: [
        function(t, e, n) {
          function o(t, e, n) {
            if (!t && !e && !n) throw new Error("Missing required arguments");
            if (!a.string(e))
              throw new TypeError("Second argument must be a String");
            if (!a.fn(n))
              throw new TypeError("Third argument must be a Function");
            if (a.node(t)) return i(t, e, n);
            if (a.nodeList(t)) return r(t, e, n);
            if (a.string(t)) return c(t, e, n);
            throw new TypeError(
              "First argument must be a String, HTMLElement, HTMLCollection, or NodeList"
            );
          }
          function i(t, e, n) {
            return (
              t.addEventListener(e, n),
              {
                destroy() {
                  t.removeEventListener(e, n);
                }
              }
            );
          }
          function r(t, e, n) {
            return (
              Array.prototype.forEach.call(t, function(t) {
                t.addEventListener(e, n);
              }),
              {
                destroy() {
                  Array.prototype.forEach.call(t, function(t) {
                    t.removeEventListener(e, n);
                  });
                }
              }
            );
          }
          function c(t, e, n) {
            return s(document.body, t, e, n);
          }
          var a = t("./is");
          var s = t("delegate");
          e.exports = o;
        },
        { "./is": 3, delegate: 2 }
      ],
      5: [
        function(t, e, n) {
          function o(t, e) {
            if (r) return r.call(t, e);
            for (
              let n = t.parentNode.querySelectorAll(e), o = 0;
              o < n.length;
              ++o
            )
              if (n[o] == t) return !0;
            return !1;
          }
          const i = Element.prototype;
          var r =
            i.matchesSelector ||
            i.webkitMatchesSelector ||
            i.mozMatchesSelector ||
            i.msMatchesSelector ||
            i.oMatchesSelector;
          e.exports = o;
        },
        {}
      ],
      6: [
        function(t, e, n) {
          function o(t) {
            let e;
            if (t.nodeName === "INPUT" || t.nodeName === "TEXTAREA")
              t.focus(), t.setSelectionRange(0, t.value.length), (e = t.value);
            else {
              t.hasAttribute("contenteditable") && t.focus();
              const n = window.getSelection();
              const o = document.createRange();
              o.selectNodeContents(t),
                n.removeAllRanges(),
                n.addRange(o),
                (e = n.toString());
            }
            return e;
          }
          e.exports = o;
        },
        {}
      ],
      7: [
        function(t, e, n) {
          function o() {}
          (o.prototype = {
            on(t, e, n) {
              const o = this.e || (this.e = {});
              return (o[t] || (o[t] = [])).push({ fn: e, ctx: n }), this;
            },
            once(t, e, n) {
              function o() {
                i.off(t, o), e.apply(n, arguments);
              }
              var i = this;
              return (o._ = e), this.on(t, o, n);
            },
            emit(t) {
              const e = [].slice.call(arguments, 1);
              const n = ((this.e || (this.e = {}))[t] || []).slice();
              let o = 0;
              const i = n.length;
              for (o; i > o; o++) n[o].fn.apply(n[o].ctx, e);
              return this;
            },
            off(t, e) {
              const n = this.e || (this.e = {});
              const o = n[t];
              const i = [];
              if (o && e)
                for (let r = 0, c = o.length; c > r; r++)
                  o[r].fn !== e && o[r].fn._ !== e && i.push(o[r]);
              return i.length ? (n[t] = i) : delete n[t], this;
            }
          }),
            (e.exports = o);
        },
        {}
      ],
      8: [
        function(e, n, o) {
          !(function(i, r) {
            if (typeof t === "function" && t.amd) t(["module", "select"], r);
            else if (typeof o !== "undefined") r(n, e("select"));
            else {
              const c = { exports: {} };
              r(c, i.select), (i.clipboardAction = c.exports);
            }
          })(this, function(t, e) {
            function n(t) {
              return t && t.__esModule ? t : { default: t };
            }
            function o(t, e) {
              if (!(t instanceof e))
                throw new TypeError("Cannot call a class as a function");
            }
            const i = n(e);
            const r =
              typeof Symbol === "function" &&
              typeof Symbol.iterator === "symbol"
                ? function(t) {
                    return typeof t;
                  }
                : function(t) {
                    return t &&
                      typeof Symbol === "function" &&
                      t.constructor === Symbol
                      ? "symbol"
                      : typeof t;
                  };
            const c = (function() {
              function t(t, e) {
                for (let n = 0; n < e.length; n++) {
                  const o = e[n];
                  (o.enumerable = o.enumerable || !1),
                    (o.configurable = !0),
                    "value" in o && (o.writable = !0),
                    Object.defineProperty(t, o.key, o);
                }
              }
              return function(e, n, o) {
                return n && t(e.prototype, n), o && t(e, o), e;
              };
            })();
            const a = (function() {
              function t(e) {
                o(this, t), this.resolveOptions(e), this.initSelection();
              }
              return (
                (t.prototype.resolveOptions = function t() {
                  const e =
                    arguments.length <= 0 || void 0 === arguments[0]
                      ? {}
                      : arguments[0];
                  (this.action = e.action),
                    (this.emitter = e.emitter),
                    (this.target = e.target),
                    (this.text = e.text),
                    (this.trigger = e.trigger),
                    (this.selectedText = "");
                }),
                (t.prototype.initSelection = function t() {
                  this.text
                    ? this.selectFake()
                    : this.target && this.selectTarget();
                }),
                (t.prototype.selectFake = function t() {
                  const e = this;
                  const n =
                    document.documentElement.getAttribute("dir") == "rtl";
                  this.removeFake(),
                    (this.fakeHandler = document.body.addEventListener(
                      "click",
                      function() {
                        return e.removeFake();
                      }
                    )),
                    (this.fakeElem = document.createElement("textarea")),
                    (this.fakeElem.style.fontSize = "12pt"),
                    (this.fakeElem.style.border = "0"),
                    (this.fakeElem.style.padding = "0"),
                    (this.fakeElem.style.margin = "0"),
                    (this.fakeElem.style.position = "fixed"),
                    (this.fakeElem.style[n ? "right" : "left"] = "-9999px"),
                    (this.fakeElem.style.top = `${window.pageYOffset ||
                      document.documentElement.scrollTop}px`),
                    this.fakeElem.setAttribute("readonly", ""),
                    (this.fakeElem.value = this.text),
                    document.body.appendChild(this.fakeElem),
                    (this.selectedText = (0, i.default)(this.fakeElem)),
                    this.copyText();
                }),
                (t.prototype.removeFake = function t() {
                  this.fakeHandler &&
                    (document.body.removeEventListener("click"),
                    (this.fakeHandler = null)),
                    this.fakeElem &&
                      (document.body.removeChild(this.fakeElem),
                      (this.fakeElem = null));
                }),
                (t.prototype.selectTarget = function t() {
                  (this.selectedText = (0, i.default)(this.target)),
                    this.copyText();
                }),
                (t.prototype.copyText = function t() {
                  let e = void 0;
                  try {
                    e = document.execCommand(this.action);
                  } catch (n) {
                    e = !1;
                  }
                  this.handleResult(e);
                }),
                (t.prototype.handleResult = function t(e) {
                  e
                    ? this.emitter.emit("success", {
                        action: this.action,
                        text: this.selectedText,
                        trigger: this.trigger,
                        clearSelection: this.clearSelection.bind(this)
                      })
                    : this.emitter.emit("error", {
                        action: this.action,
                        trigger: this.trigger,
                        clearSelection: this.clearSelection.bind(this)
                      });
                }),
                (t.prototype.clearSelection = function t() {
                  this.target && this.target.blur(),
                    window.getSelection().removeAllRanges();
                }),
                (t.prototype.destroy = function t() {
                  this.removeFake();
                }),
                c(t, [
                  {
                    key: "action",
                    set: function t() {
                      const e =
                        arguments.length <= 0 || void 0 === arguments[0]
                          ? "copy"
                          : arguments[0];
                      if (
                        ((this._action = e),
                        this._action !== "copy" && this._action !== "cut")
                      )
                        throw new Error(
                          'Invalid "action" value, use either "copy" or "cut"'
                        );
                    },
                    get: function t() {
                      return this._action;
                    }
                  },
                  {
                    key: "target",
                    set: function t(e) {
                      if (void 0 !== e) {
                        if (
                          !e ||
                          (typeof e === "undefined" ? "undefined" : r(e)) !==
                            "object" ||
                          e.nodeType !== 1
                        )
                          throw new Error(
                            'Invalid "target" value, use a valid Element'
                          );
                        if (
                          this.action === "copy" &&
                          e.hasAttribute("disabled")
                        )
                          throw new Error(
                            'Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute'
                          );
                        if (
                          this.action === "cut" &&
                          (e.hasAttribute("readonly") ||
                            e.hasAttribute("disabled"))
                        )
                          throw new Error(
                            'Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes'
                          );
                        this._target = e;
                      }
                    },
                    get: function t() {
                      return this._target;
                    }
                  }
                ]),
                t
              );
            })();
            t.exports = a;
          });
        },
        { select: 6 }
      ],
      9: [
        function(e, n, o) {
          !(function(i, r) {
            if (typeof t === "function" && t.amd)
              t(
                [
                  "module",
                  "./clipboard-action",
                  "tiny-emitter",
                  "good-listener"
                ],
                r
              );
            else if (typeof o !== "undefined")
              r(
                n,
                e("./clipboard-action"),
                e("tiny-emitter"),
                e("good-listener")
              );
            else {
              const c = { exports: {} };
              r(c, i.clipboardAction, i.tinyEmitter, i.goodListener),
                (i.clipboard = c.exports);
            }
          })(this, function(t, e, n, o) {
            function i(t) {
              return t && t.__esModule ? t : { default: t };
            }
            function r(t, e) {
              if (!(t instanceof e))
                throw new TypeError("Cannot call a class as a function");
            }
            function c(t, e) {
              if (!t)
                throw new ReferenceError(
                  "this hasn't been initialised - super() hasn't been called"
                );
              return !e || (typeof e !== "object" && typeof e !== "function")
                ? t
                : e;
            }
            function a(t, e) {
              if (typeof e !== "function" && e !== null)
                throw new TypeError(
                  `Super expression must either be null or a function, not ${typeof e}`
                );
              (t.prototype = Object.create(e && e.prototype, {
                constructor: {
                  value: t,
                  enumerable: !1,
                  writable: !0,
                  configurable: !0
                }
              })),
                e &&
                  (Object.setPrototypeOf
                    ? Object.setPrototypeOf(t, e)
                    : (t.__proto__ = e));
            }
            function s(t, e) {
              const n = `data-clipboard-${t}`;
              if (e.hasAttribute(n)) return e.getAttribute(n);
            }
            const l = i(e);
            const u = i(n);
            const f = i(o);
            const d = (function(t) {
              function e(n, o) {
                r(this, e);
                const i = c(this, t.call(this));
                return i.resolveOptions(o), i.listenClick(n), i;
              }
              return (
                a(e, t),
                (e.prototype.resolveOptions = function t() {
                  const e =
                    arguments.length <= 0 || void 0 === arguments[0]
                      ? {}
                      : arguments[0];
                  (this.action =
                    typeof e.action === "function"
                      ? e.action
                      : this.defaultAction),
                    (this.target =
                      typeof e.target === "function"
                        ? e.target
                        : this.defaultTarget),
                    (this.text =
                      typeof e.text === "function" ? e.text : this.defaultText);
                }),
                (e.prototype.listenClick = function t(e) {
                  const n = this;
                  this.listener = (0, f.default)(e, "click", function(t) {
                    return n.onClick(t);
                  });
                }),
                (e.prototype.onClick = function t(e) {
                  const n = e.delegateTarget || e.currentTarget;
                  this.clipboardAction && (this.clipboardAction = null),
                    (this.clipboardAction = new l.default({
                      action: this.action(n),
                      target: this.target(n),
                      text: this.text(n),
                      trigger: n,
                      emitter: this
                    }));
                }),
                (e.prototype.defaultAction = function t(e) {
                  return s("action", e);
                }),
                (e.prototype.defaultTarget = function t(e) {
                  const n = s("target", e);
                  return n ? document.querySelector(n) : void 0;
                }),
                (e.prototype.defaultText = function t(e) {
                  return s("text", e);
                }),
                (e.prototype.destroy = function t() {
                  this.listener.destroy(),
                    this.clipboardAction &&
                      (this.clipboardAction.destroy(),
                      (this.clipboardAction = null));
                }),
                e
              );
            })(u.default);
            t.exports = d;
          });
        },
        { "./clipboard-action": 8, "good-listener": 4, "tiny-emitter": 7 }
      ]
    },
    {},
    [9]
  )(9);
});
